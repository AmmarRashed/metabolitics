
 Pipeline(steps=[('vect2', DictVectorizer(dtype=<class 'numpy.float64'>, separator='=', sort=True,
        sparse=False)), ('pca', PCA(copy=True, iterated_power='auto', n_components=None, random_state=None,
  svd_solver='auto', tol=0.0, whiten=False)), ('clf', MLPClassifier(activation='logistic', alpha=0.0001...
       solver='adam', tol=0.0001, validation_fraction=0.1, verbose=True,
       warm_start=False))]) 

train accuracy: 0.943750
test accuracy: 0.925926

              precision    recall  f1-score   support

         bc       0.93      0.97      0.95        40
          h       0.92      0.79      0.85        14

avg / total       0.93      0.93      0.92        54


 Pipeline(steps=[('vect2', DictVectorizer(dtype=<class 'numpy.float64'>, separator='=', sort=True,
        sparse=False)), ('pca', PCA(copy=True, iterated_power='auto', n_components=None, random_state=None,
  svd_solver='auto', tol=0.0, whiten=False)), ('clf', MLPClassifier(activation='logistic', alpha=0.0001...
       solver='adam', tol=0.0001, validation_fraction=0.1, verbose=True,
       warm_start=False))]) 

train accuracy: 0.987500
test accuracy: 0.925926

              precision    recall  f1-score   support

         bc       0.95      0.95      0.95        40
          h       0.86      0.86      0.86        14

avg / total       0.93      0.93      0.93        54


 Pipeline(steps=[('vect2', DictVectorizer(dtype=<class 'numpy.float64'>, separator='=', sort=True,
        sparse=False)), ('pca', PCA(copy=True, iterated_power='auto', n_components=None, random_state=None,
  svd_solver='auto', tol=0.0, whiten=False)), ('clf', MLPClassifier(activation='relu', alpha=0.0001, ba...
       solver='adam', tol=0.0001, validation_fraction=0.1, verbose=True,
       warm_start=False))]) 

train accuracy: 1.000000
test accuracy: 0.851852

              precision    recall  f1-score   support

         bc       0.94      0.85      0.89        40
          h       0.67      0.86      0.75        14

avg / total       0.87      0.85      0.86        54


 Pipeline(steps=[('vect2', DictVectorizer(dtype=<class 'numpy.float64'>, separator='=', sort=True,
        sparse=False)), ('pca', PCA(copy=True, iterated_power='auto', n_components=None, random_state=None,
  svd_solver='auto', tol=0.0, whiten=False)), ('clf', MLPClassifier(activation='tanh', alpha=0.0001, ba...
       solver='adam', tol=0.0001, validation_fraction=0.1, verbose=True,
       warm_start=False))]) 

train accuracy: 0.968750
test accuracy: 0.907407

              precision    recall  f1-score   support

         bc       0.95      0.93      0.94        40
          h       0.80      0.86      0.83        14

avg / total       0.91      0.91      0.91        54


 Pipeline(steps=[('vect2', DictVectorizer(dtype=<class 'numpy.float64'>, separator='=', sort=True,
        sparse=False)), ('pca', PCA(copy=True, iterated_power='auto', n_components=None, random_state=None,
  svd_solver='auto', tol=0.0, whiten=False)), ('clf', MLPClassifier(activation='logistic', alpha=0.0001...
       solver='adam', tol=0.0001, validation_fraction=0.1, verbose=True,
       warm_start=False))]) 

train accuracy: 1.000000
test accuracy: 0.962963

              precision    recall  f1-score   support

         bc       1.00      0.95      0.97        40
          h       0.88      1.00      0.93        14

avg / total       0.97      0.96      0.96        54


 Pipeline(steps=[('vect2', DictVectorizer(dtype=<class 'numpy.float64'>, separator='=', sort=True,
        sparse=False)), ('pca', PCA(copy=True, iterated_power='auto', n_components=None, random_state=None,
  svd_solver='auto', tol=0.0, whiten=False)), ('clf', MLPClassifier(activation='logistic', alpha=0.0001...
       solver='adam', tol=0.0001, validation_fraction=0.1, verbose=True,
       warm_start=False))]) 

train accuracy: 1.000000
test accuracy: 0.944444

              precision    recall  f1-score   support

         bc       0.97      0.95      0.96        40
          h       0.87      0.93      0.90        14

avg / total       0.95      0.94      0.95        54


 Pipeline(steps=[('vect2', DictVectorizer(dtype=<class 'numpy.float64'>, separator='=', sort=True,
        sparse=False)), ('pca', PCA(copy=True, iterated_power='auto', n_components=None, random_state=None,
  svd_solver='auto', tol=0.0, whiten=False)), ('clf', MLPClassifier(activation='logistic', alpha=0.0001...
       solver='adam', tol=0.0001, validation_fraction=0.1, verbose=True,
       warm_start=False))]) 

train accuracy: 1.000000
test accuracy: 0.944444

              precision    recall  f1-score   support

         bc       0.97      0.95      0.96        40
          h       0.87      0.93      0.90        14

avg / total       0.95      0.94      0.95        54


 Pipeline(steps=[('vect2', DictVectorizer(dtype=<class 'numpy.float64'>, separator='=', sort=True,
        sparse=False)), ('pca', PCA(copy=True, iterated_power='auto', n_components=None, random_state=None,
  svd_solver='auto', tol=0.0, whiten=False)), ('clf', MLPClassifier(activation='logistic', alpha=0.0001...
       solver='adam', tol=0.0001, validation_fraction=0.1, verbose=True,
       warm_start=False))]) 

train accuracy: 1.000000
test accuracy: 0.962963

              precision    recall  f1-score   support

         bc       1.00      0.95      0.97        40
          h       0.88      1.00      0.93        14

avg / total       0.97      0.96      0.96        54


 Pipeline(steps=[('vect2', DictVectorizer(dtype=<class 'numpy.float64'>, separator='=', sort=True,
        sparse=False)), ('pca', PCA(copy=True, iterated_power='auto', n_components=None, random_state=None,
  svd_solver='auto', tol=0.0, whiten=False)), ('clf', MLPClassifier(activation='logistic', alpha=0.0001...
       solver='adam', tol=0.0001, validation_fraction=0.1, verbose=True,
       warm_start=False))]) 

train accuracy: 1.000000
test accuracy: 0.962963

              precision    recall  f1-score   support

         bc       1.00      0.95      0.97        40
          h       0.88      1.00      0.93        14

avg / total       0.97      0.96      0.96        54


 Pipeline(steps=[('vect2', DictVectorizer(dtype=<class 'numpy.float64'>, separator='=', sort=True,
        sparse=False)), ('pca', PCA(copy=True, iterated_power='auto', n_components=None, random_state=None,
  svd_solver='auto', tol=0.0, whiten=False)), ('clf', MLPClassifier(activation='logistic', alpha=1e-05,...
       solver='adam', tol=0.0001, validation_fraction=0.1, verbose=True,
       warm_start=False))]) 

train accuracy: 1.000000
test accuracy: 0.962963

              precision    recall  f1-score   support

         bc       1.00      0.95      0.97        40
          h       0.88      1.00      0.93        14

avg / total       0.97      0.96      0.96        54


 Pipeline(steps=[('vect2', DictVectorizer(dtype=<class 'numpy.float64'>, separator='=', sort=True,
        sparse=False)), ('pca', PCA(copy=True, iterated_power='auto', n_components=None, random_state=None,
  svd_solver='auto', tol=0.0, whiten=False)), ('clf', MLPClassifier(activation='logistic', alpha=0.01, ...
       solver='adam', tol=0.0001, validation_fraction=0.1, verbose=True,
       warm_start=False))]) 

train accuracy: 1.000000
test accuracy: 0.944444

              precision    recall  f1-score   support

         bc       0.97      0.95      0.96        40
          h       0.87      0.93      0.90        14

avg / total       0.95      0.94      0.95        54


 Pipeline(steps=[('vect2', DictVectorizer(dtype=<class 'numpy.float64'>, separator='=', sort=True,
        sparse=False)), ('pca', PCA(copy=True, iterated_power='auto', n_components=None, random_state=None,
  svd_solver='auto', tol=0.0, whiten=False)), ('clf', MLPClassifier(activation='logistic', alpha=0.0001...
       solver='adam', tol=0.0001, validation_fraction=0.1, verbose=True,
       warm_start=False))]) 

train accuracy: 1.000000
test accuracy: 0.962963

              precision    recall  f1-score   support

         bc       1.00      0.95      0.97        40
          h       0.88      1.00      0.93        14

avg / total       0.97      0.96      0.96        54

